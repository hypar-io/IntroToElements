#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Import Hypar Library

#!csharp

#r "nuget: Hypar.Elements, *-*"

#!markdown

# Points, Lines, and Polylines
Hypar is a 3d world. X and Y form the ground, and Z is up, like most architectural modeling applications.

Hypar uses the `Vector3` type for both points (positions) and vectors (directions). 

Create a new `Vector3` with the `Vector3` constructor:

#!csharp

// Create a vector

#!markdown

Create a `Line` with the `Line` constructor, and pass it two `Vector3`s:

#!csharp

// Create a line

#!markdown

Create a `Polyline` with the `Polyline` constructor. You can pass it a `List` of `Vector3`, or directly pass it any number of `Vector3`s in the arguments.

#!csharp

// Create a polyline

#!markdown

You can skip the `new Vector3` part in many cases. 

(Polyline takes a `params[]` argument, and we auto-convert Tuples with 2 and 3 elements to `Vector3`, if you're curious how this works.)

#!csharp

// A slightly shorter way to do the same thing:

#!markdown

# Polygons
A `Polygon` is just like a `Polyline`, except it represents a closed shape, and it must be planar.

#!csharp

// Create a polygon

#!markdown

There are also convenience shapes for common cases: 
- Rectangle
- Star
- L
- U
- Ngon

Also note how we can display multiple polylines at once in a notebook by returning a list or array:

#!csharp

// Create various polygons

#!markdown

# Exercise

Use a for loop to create 20 concentric rectangles, each 1 unit larger than the previous one. Return them in a list so we can see them all.
