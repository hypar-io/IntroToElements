#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

### Setup

#!csharp

#r "nuget: Hypar.Elements, *-*"

#!markdown

# Profiles and Solid Operations

#!markdown

## Profiles

Profiles are basically "Polygons with holes" â€” and they're a major geometry workhorse on Hypar. They're used to represent everything from the outlines of spaces, to building footprints, to the cross-sections of structural members.

#!csharp

// Create a profile

#!markdown

Profiles can have multiple holes, too:

#!csharp

// Create a profile with multiple holes

#!markdown

## Solid Operations

We can also create solid geometry, not just curves. The two most common are the `Lamina`, which is basically a flat surface, and the `Extrude`, which is a straight extrusion along a vector. Both can be created from `Profile`s.

#!csharp

// Create a lamina from a profile

#!csharp

// Create an extrude from a profile

#!markdown

`Sweep`s are also supported:

#!csharp

// Create a sweep

#!markdown

## Representations

You can create a `Representation` out of multiple solid operations, for more complex geometry. Solid operations may be solid and void, so a representation can be a complex boolean:

#!csharp

// Create a representation

#!markdown

# Profile Operations
You can also perform useful 2D operations on profiles to create new Profiles. These include:
- `Profile.Offset`
- `Profile.Intersection`
- `Profile.UnionAll` 
- `Profile.Split`

among others. 

#!csharp

// Offset

#!csharp

// Intersect

#!csharp

// Union All

#!csharp

// Split

#!markdown

# Exercise

Create a profile with a hole, and create an extrude from it. Then, create a representation from the extrude. Consider adding an additional void operation to the represenation to subtract from the extrude. Finally, return the representation.
